import base64
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
import uuid

def generate_saml_response(authn_request_xml, user_name_id="12345678901", issuer="https://twoj-bank.pl"):
    # Parsowanie AuthnRequest
    ns = {
        'samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',
        'saml': 'urn:oasis:names:tc:SAML:2.0:assertion'
    }
    root = ET.fromstring(authn_request_xml)
    authn_request = root

    # Pobieranie danych z AuthnRequest
    in_response_to = authn_request.attrib.get('ID')
    destination = authn_request.attrib.get('AssertionConsumerServiceURL')
    issuer_authn = authn_request.find('.//saml:Issuer', ns).text
    now = datetime.utcnow()
    now_str = now.strftime('%Y-%m-%dT%H:%M:%SZ')
    not_on_or_after = (now + timedelta(minutes=5)).strftime('%Y-%m-%dT%H:%M:%SZ')

    # Budowa SAMLResponse (bez podpisu!)
    saml_response = f'''<samlp:Response xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
        ID="_{str(uuid.uuid4())}"
        InResponseTo="{in_response_to}"
        Version="2.0"
        IssueInstant="{now_str}"
        Destination="{destination}">
      <saml:Issuer xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">{issuer}</saml:Issuer>
      <samlp:Status>
        <samlp:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>
      </samlp:Status>
      <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
                      ID="_{str(uuid.uuid4())}"
                      IssueInstant="{now_str}"
                      Version="2.0">
        <saml:Issuer>{issuer}</saml:Issuer>
        <saml:Subject>
          <saml:NameID Format="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified">{user_name_id}</saml:NameID>
          <saml:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
            <saml:SubjectConfirmationData InResponseTo="{in_response_to}"
                                          NotOnOrAfter="{not_on_or_after}"
                                          Recipient="{destination}"/>
          </saml:SubjectConfirmation>
        </saml:Subject>
        <saml:Conditions NotBefore="{now_str}" NotOnOrAfter="{not_on_or_after}">
          <saml:AudienceRestriction>
            <saml:Audience>{issuer_authn}</saml:Audience>
          </saml:AudienceRestriction>
        </saml:Conditions>
      </saml:Assertion>
    </samlp:Response>'''
    return saml_response

def build_sign_request(saml_response_b64, document_b64, call_id, timestamp):
    return f'''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                  xmlns:tpxs="http://www.cpi.gov.pl/pz/TPKIdpSigningServiceSchema">
   <soapenv:Header/>
   <soapenv:Body>
      <tpxs:reqSign callId="{call_id}" requestTimestamp="{timestamp}">
         <tpxs:samlResponse>{saml_response_b64}</tpxs:samlResponse>
         <tpxs:documentToSign>{document_b64}</tpxs:documentToSign>
      </tpxs:reqSign>
   </soapenv:Body>
</soapenv:Envelope>'''

if __name__ == "__main__":
    # 1. Wklej AuthnRequest (XML, nie Base64!)
    print("Wklej AuthnRequest (XML, bez Base64):")
    authn_request_xml = ""
    while True:
        line = input()
        if line.strip() == "END":
            break
        authn_request_xml += line + "\n"

    # 2. Dokument do podpisu (Base64, np. z pliku PDF, na testy możesz użyć testowego stringa)
    document_b64 = "UEsDBBQAAAAIA..."  # <-- Wklej tu Base64 swojego dokumentu

    # 3. Dane wywołania
    call_id = str(uuid.uuid4())
    timestamp = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + "Z"

    # 4. Generuj SAMLResponse
    saml_response = generate_saml_response(authn_request_xml)
    saml_response_b64 = base64.b64encode(saml_response.encode("utf-8")).decode("utf-8")

    # 5. Generuj request do sign
    sign_request_xml = build_sign_request(saml_response_b64, document_b64, call_id, timestamp)
    print("\n=== SOAP Request do sign (wklej do SOAP UI) ===\n")
    print(sign_request_xml)
